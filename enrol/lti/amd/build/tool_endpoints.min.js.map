{"version":3,"file":"tool_endpoints.min.js","sources":["../src/tool_endpoints.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Module supporting the dynamic and manual registration tabs in the tool registration admin setting.\n *\n * @module     enrol_lti/tool_endpoints\n * @copyright  2021 Jake Dallimore <jrhdallimore@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {add as toastNotice} from 'core/toast';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport {get_strings as getStrings} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport 'core/copy_to_clipboard';\n\n/**\n * DOM Selectors.\n * @type {{GENERATE_REGISTRATION_URL_BUTTON: string, URL_COPY_TO_CLIPBOARD: string, URL_VALUE: string,\n *       REGISTRATION_URL_TABLE: string, URL_DELETE: string, URL_INFO: string}}\n */\nconst SELECTORS = {\n    GENERATE_REGISTRATION_URL_BUTTON: '[id^=\"lti_generate_registration_url\"]',\n    REGISTRATION_URL_TABLE: '[id^=\"lti_registration_url_table_\"]',\n    URL_VALUE: '[id^=\"lti_tool_endpoint_url_\"]',\n    URL_INFO: '[id^=\"lti_tool_endpoint_info_\"]',\n    URL_COPY_TO_CLIPBOARD: '[data-action=\"copytoclipboard\"]',\n    URL_DELETE: '[data-action=\"delete\"]'\n};\n\n/**\n * Remove the registration URL from the DOM, restoring the button used to create a URL in the process.\n */\nconst removeRegistrationURL = () => {\n    getStrings([\n        {key: 'registrationurldeleted', component: 'enrol_lti'}\n    ])\n    .then((deletedStr) => {\n        document.querySelector(SELECTORS.REGISTRATION_URL_TABLE).classList.add('hidden');\n        let createURLButton = document.querySelector(SELECTORS.GENERATE_REGISTRATION_URL_BUTTON);\n        createURLButton.setAttribute('aria-disabled', 'false');\n        createURLButton.removeAttribute('aria-label');\n        createURLButton.classList.remove('disabled');\n        createURLButton.title = '';\n        document.querySelector(SELECTORS.URL_VALUE).value = '';\n        document.querySelector(SELECTORS.URL_INFO).innerHTML = '';\n        createURLButton.focus();\n\n        // Let the user know the URL was deleted.\n        toastNotice(deletedStr);\n        return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Create and display the registration URL component in the DOM.\n *\n * @param {HTMLElement} generateButton the button responsible for generating the URL, which will be disabled once a URL is created.\n */\nconst createAndDisplayRegistrationURL = (generateButton) => {\n    let requests = [\n        {methodname: 'enrol_lti_get_lti_advantage_registration_url', args: {'createifmissing': true}},\n    ];\n    Promise.all([\n        getStrings([\n            {key: 'registrationurlgeneratesuccess', component: 'enrol_lti'},\n            {key: 'registrationurlcannotgenerate', component: 'enrol_lti'}\n        ]),\n        Ajax.call(requests)[0]\n    ])\n    .then(([[generateSuccessStr, cannotGenerateStr], urlObject]) => {\n        document.querySelector(SELECTORS.URL_VALUE).value = urlObject.url;\n        document.querySelector(SELECTORS.URL_INFO).innerHTML = urlObject.expirystring;\n        document.querySelector(SELECTORS.REGISTRATION_URL_TABLE).classList.remove('hidden');\n        generateButton.setAttribute('aria-disabled', 'true');\n        generateButton.classList.add('disabled');\n        generateButton.title = cannotGenerateStr;\n        generateButton.setAttribute('aria-label', cannotGenerateStr);\n\n        toastNotice(generateSuccessStr);\n        return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Display a delete confirmation modal.\n *\n * @returns {Promise}\n */\nconst showDeleteModal = () => {\n\n    return ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        large: false,\n        title: getString('registrationurldeletetitle', 'enrol_lti'),\n        body: getString('registrationurldeletebody', 'enrol_lti')\n    })\n    .then(modal => {\n        modal.setSaveButtonText(getString('registrationurldeleteconfirm', 'enrol_lti'));\n\n        modal.getRoot().on(ModalEvents.save, () => {\n            let requests = [\n                {methodname: 'enrol_lti_delete_lti_advantage_registration_url', args: []},\n            ];\n            let promises = Ajax.call(requests);\n\n            promises[0].then((result) => {\n                if (result.status === true) {\n                    removeRegistrationURL();\n                }\n                return;\n            }).catch(Notification.exception);\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            modal.destroy();\n        });\n\n        return modal.show();\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Click handler which generates a registration URL and updates the DOM.\n *\n * @param {Event} event a click event.\n */\nconst generateRegistrationURLHandler = (event) => {\n    const triggerElement = event.target.closest(SELECTORS.GENERATE_REGISTRATION_URL_BUTTON);\n    if (triggerElement === null) {\n        return;\n    }\n    event.preventDefault();\n\n    if (event.target.getAttribute('aria-disabled') == \"true\") {\n        return;\n    }\n\n    createAndDisplayRegistrationURL(event.target);\n};\n\n/**\n * Focus handler for the registration URL field, enabling auto select of text on click.\n *\n * @param {Event} event a click event.\n */\nconst focusURLHandler = (event) => {\n    const triggerElement = event.target.closest(SELECTORS.URL_VALUE);\n    if (triggerElement === null) {\n        return;\n    }\n    event.preventDefault();\n\n    triggerElement.select();\n};\n\n/**\n * Click handler which generates a user confirmation modal during URL deletion.\n *\n * @param {Event} event a click event.\n */\nconst deleteClickHandler = (event) => {\n    const triggerElement = event.target.closest(SELECTORS.URL_DELETE);\n    if (triggerElement === null) {\n        return;\n    }\n    event.preventDefault();\n\n    showDeleteModal();\n};\n\n/**\n * Initialise the tool registration page, attaching handlers, prefetching strings, etc.\n */\nexport const init = () => {\n    prefetchStrings('enrol_lti', [\n        'registrationurldeletetitle',\n        'registrationurldeletebody',\n        'registrationurldeleteconfirm',\n        'registrationurlgenerate',\n        'registrationurldeleted',\n        'registrationurlgeneratesuccess',\n        'registrationurlcannotgenerate'\n    ]);\n\n    // Event capturing supporting the select on focus behaviour (with text selection permitted on subsequent clicks).\n    document.addEventListener('focusin', focusURLHandler);\n\n    // And delegation for deleting the URL.\n    document.addEventListener('click', deleteClickHandler);\n\n    // And delegation for creating a new registration URL.\n    document.addEventListener('click', generateRegistrationURLHandler);\n};\n"],"names":["SELECTORS","showDeleteModal","ModalFactory","create","type","types","SAVE_CANCEL","large","title","body","then","modal","setSaveButtonText","getRoot","on","ModalEvents","save","Ajax","call","methodname","args","result","status","key","component","deletedStr","document","querySelector","classList","add","createURLButton","setAttribute","removeAttribute","remove","value","innerHTML","focus","catch","Notification","exception","hidden","destroy","show","generateRegistrationURLHandler","event","generateButton","target","closest","preventDefault","getAttribute","Promise","all","_ref","generateSuccessStr","cannotGenerateStr","urlObject","url","expirystring","focusURLHandler","triggerElement","select","deleteClickHandler","addEventListener"],"mappings":";;;;;;;0RAoCMA,2CACgC,wCADhCA,iCAEsB,sCAFtBA,oBAGS,iCAHTA,mBAIQ,kCAJRA,qBAMU,yBAgEVC,gBAAkB,IAEbC,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,YACzBC,OAAO,EACPC,OAAO,mBAAU,6BAA8B,aAC/CC,MAAM,mBAAU,4BAA6B,eAEhDC,MAAKC,QACFA,MAAMC,mBAAkB,mBAAU,+BAAgC,cAElED,MAAME,UAAUC,GAAGC,sBAAYC,MAAM,KAIlBC,cAAKC,KAHL,CACX,CAACC,WAAY,kDAAmDC,KAAM,MAIjE,GAAGV,MAAMW,UACQ,IAAlBA,OAAOC,6BA3EZ,CACP,CAACC,IAAK,yBAA0BC,UAAW,eAE9Cd,MAAMe,aACHC,SAASC,cAAc3B,kCAAkC4B,UAAUC,IAAI,cACnEC,gBAAkBJ,SAASC,cAAc3B,4CAC7C8B,gBAAgBC,aAAa,gBAAiB,SAC9CD,gBAAgBE,gBAAgB,cAChCF,gBAAgBF,UAAUK,OAAO,YACjCH,gBAAgBtB,MAAQ,GACxBkB,SAASC,cAAc3B,qBAAqBkC,MAAQ,GACpDR,SAASC,cAAc3B,oBAAoBmC,UAAY,GACvDL,gBAAgBM,uBAGJX,eAGfY,MAAMC,sBAAaC,cA6DTF,MAAMC,sBAAaC,cAG1B5B,MAAME,UAAUC,GAAGC,sBAAYyB,QAAQ,WACnC7B,MAAM8B,aAGH9B,MAAM+B,UAEhBL,MAAMC,sBAAaC,WAQlBI,+BAAkCC,QAtECC,IAAAA,eAwEd,OADAD,MAAME,OAAOC,QAAQ/C,8CAI5C4C,MAAMI,iBAE4C,QAA9CJ,MAAME,OAAOG,aAAa,mBA7EOJ,eAiFLD,MAAME,OA7EtCI,QAAQC,IAAI,EACR,oBAAW,CACP,CAAC5B,IAAK,iCAAkCC,UAAW,aACnD,CAACD,IAAK,gCAAiCC,UAAW,eAEtDP,cAAKC,KARM,CACX,CAACC,WAAY,+CAAgDC,KAAM,kBAAoB,MAOnE,KAEvBV,MAAK0C,YAAGC,mBAAoBC,mBAAoBC,gBAC7C7B,SAASC,cAAc3B,qBAAqBkC,MAAQqB,UAAUC,IAC9D9B,SAASC,cAAc3B,oBAAoBmC,UAAYoB,UAAUE,aACjE/B,SAASC,cAAc3B,kCAAkC4B,UAAUK,OAAO,UAC1EY,eAAed,aAAa,gBAAiB,QAC7Cc,eAAejB,UAAUC,IAAI,YAC7BgB,eAAerC,MAAQ8C,kBACvBT,eAAed,aAAa,aAAcuB,kCAE9BD,uBAGfhB,MAAMC,sBAAaC,cAkElBmB,gBAAmBd,cACfe,eAAiBf,MAAME,OAAOC,QAAQ/C,qBACrB,OAAnB2D,iBAGJf,MAAMI,iBAENW,eAAeC,WAQbC,mBAAsBjB,QAED,OADAA,MAAME,OAAOC,QAAQ/C,wBAI5C4C,MAAMI,iBAEN/C,kCAMgB,mCACA,YAAa,CACzB,6BACA,4BACA,+BACA,0BACA,yBACA,iCACA,kCAIJyB,SAASoC,iBAAiB,UAAWJ,iBAGrChC,SAASoC,iBAAiB,QAASD,oBAGnCnC,SAASoC,iBAAiB,QAASnB"}