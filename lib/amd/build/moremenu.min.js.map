{"version":3,"file":"moremenu.min.js","sources":["../src/moremenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     core/moremenu\n * @copyright  2021 Moodle\n * @author     Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport menu_navigation from \"core/menu_navigation\";\n/**\n * Moremenu selectors.\n */\nconst Selectors = {\n    regions: {\n        moredropdown: '[data-region=\"moredropdown\"]',\n        morebutton: '[data-region=\"morebutton\"]'\n    },\n    classes: {\n        dropdownitem: 'dropdown-item',\n        dropdownmoremenu: 'dropdownmoremenu',\n        hidden: 'd-none',\n        active: 'active',\n        nav: 'nav',\n        navlink: 'nav-link',\n        observed: 'observed',\n    },\n    attributes: {\n        menu: '[role=\"menu\"]',\n        dropdowntoggle: '[data-toggle=\"dropdown\"]'\n    }\n};\n\n/**\n * Auto Collapse navigation items that wrap into a dropdown menu.\n *\n * @param {HTMLElement} menu The navbar container.\n */\nconst autoCollapse = menu => {\n\n    const maxHeight = menu.parentNode.offsetHeight + 1;\n\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\n\n    // If the menu items wrap and the menu height is larger than the height of the\n    // parent then start pushing navlinks into the moreDropdown.\n    if (menu.offsetHeight > maxHeight) {\n        moreButton.classList.remove(Selectors.classes.hidden);\n\n        const menuNodes = Array.from(menu.children).reverse();\n        menuNodes.forEach(item => {\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu)) {\n                // After moving the menu items into the moreDropdown check again\n                // if the menu height is still larger then the height of the parent.\n                if (menu.offsetHeight > maxHeight) {\n                    const lastNode = menu.removeChild(item);\n                    // Move this node into the more dropdown menu.\n                    moveIntoMoreDropdown(menu, lastNode, true);\n                }\n            }\n        });\n    } else {\n        // If the menu height is smaller than the height of the parent, then try returning navlinks to the menu.\n        if ('children' in moreDropdown) {\n            // Iterate through the nodes within the more dropdown menu.\n            Array.from(moreDropdown.children).forEach(item => {\n                // Don't move the node to the more menu if it is explicitly defined that\n                // this node should be displayed in the more dropdown menu at all times.\n                if (menu.offsetHeight < maxHeight && item.dataset.forceintomoremenu !== 'true') {\n                    const lastNode = moreDropdown.removeChild(item);\n                    // Move this node from the more dropdown menu into the main section of the menu.\n                    moveOutOfMoreDropdown(menu, lastNode);\n                }\n            });\n            // If there are no more nodes in the more dropdown menu we can hide the moreButton.\n            if (Array.from(moreDropdown.children).length === 0) {\n                moreButton.classList.add(Selectors.classes.hidden);\n            }\n        }\n\n        if (menu.offsetHeight > maxHeight) {\n            autoCollapse(menu);\n        }\n    }\n    menu.parentNode.classList.add(Selectors.classes.observed);\n};\n\n/**\n * Move a node into the \"more\" dropdown menu.\n *\n * This method forces a given navigation node to be added and displayed within the \"more\" dropdown menu.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n * @param {HTMLElement} navNode The navigation node.\n * @param {boolean} prepend Whether to prepend or append the node to the content in the more dropdown menu.\n */\nconst moveIntoMoreDropdown = (menu, navNode, prepend = false) => {\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\n\n    const navLink = navNode.querySelector('.' + Selectors.classes.navlink);\n    // If there are navLinks that contain an active link in the moreDropdown\n    // make the dropdownToggle in the moreButton active.\n    if (navLink.classList.contains(Selectors.classes.active)) {\n        dropdownToggle.classList.add(Selectors.classes.active);\n    }\n\n    // Change the styling of the navLink to a dropdownitem and push it into\n    // the moreDropdown.\n    navLink.classList.remove(Selectors.classes.navlink);\n    navLink.classList.add(Selectors.classes.dropdownitem);\n    if (prepend) {\n        moreDropdown.prepend(navNode);\n    } else {\n        moreDropdown.append(navNode);\n    }\n};\n\n/**\n * Move a node out of the \"more\" dropdown menu.\n *\n * This method forces a given node from the \"more\" dropdown menu to be displayed in the main section of the menu.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n * @param {HTMLElement} navNode The navigation node.\n */\nconst moveOutOfMoreDropdown = (menu, navNode) => {\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\n    const navLink = navNode.querySelector('.' + Selectors.classes.dropdownitem);\n\n    // Stop displaying the active state on the dropdownToggle if\n    // the active navlink is removed.\n    if (navLink.classList.contains(Selectors.classes.active)) {\n        dropdownToggle.classList.remove(Selectors.classes.active);\n    }\n    navLink.classList.remove(Selectors.classes.dropdownitem);\n    navLink.classList.add(Selectors.classes.navlink);\n    menu.insertBefore(navNode, moreButton);\n};\n\n/**\n * Initialise the more menus.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n */\nexport default menu => {\n    menu.firstElementChild.querySelector('[role=\"menuitem\"]').setAttribute('tabindex', '0');\n    // Pre-populate the \"more\" dropdown menu with navigation nodes which are set to be displayed in this menu\n    // by default at all times.\n    if ('children' in menu) {\n        const moreButton = menu.querySelector(Selectors.regions.morebutton);\n        const menuNodes = Array.from(menu.children);\n        menuNodes.forEach((item) => {\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu) &&\n                    item.dataset.forceintomoremenu === 'true') {\n                // Append this node into the more dropdown menu.\n                moveIntoMoreDropdown(menu, item, false);\n                // After adding the node into the more dropdown menu, make sure that the more dropdown menu button\n                // is displayed.\n                if (moreButton.classList.contains(Selectors.classes.hidden)) {\n                    moreButton.classList.remove(Selectors.classes.hidden);\n                }\n            }\n        });\n    }\n    // Populate the more dropdown menu with additional nodes if necessary, depending on the current screen size.\n    autoCollapse(menu);\n    menu_navigation(menu);\n\n    // When the screen size changes make sure the menu still fits.\n    window.addEventListener('resize', () => {\n        autoCollapse(menu);\n        menu_navigation(menu);\n    });\n\n    const toggledropdown = e => {\n        const innerMenu = e.target.parentNode.querySelector(Selectors.attributes.menu);\n        if (innerMenu) {\n            innerMenu.classList.toggle('show');\n        }\n        e.stopPropagation();\n    };\n\n    // If there are dropdowns in the MoreMenu, add a new\n    // event listener to show the contents on click and prevent the\n    // moreMenu from closing.\n    $('.' + Selectors.classes.dropdownmoremenu).on('show.bs.dropdown', function() {\n        const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n        moreDropdown.querySelectorAll('.dropdown').forEach((dropdown) => {\n            dropdown.removeEventListener('click', toggledropdown, true);\n            dropdown.addEventListener('click', toggledropdown, true);\n        });\n    });\n};\n"],"names":["Selectors","moredropdown","morebutton","dropdownitem","dropdownmoremenu","hidden","active","nav","navlink","observed","menu","dropdowntoggle","autoCollapse","maxHeight","parentNode","offsetHeight","moreDropdown","querySelector","moreButton","classList","remove","Array","from","children","reverse","forEach","item","contains","lastNode","removeChild","moveIntoMoreDropdown","dataset","forceintomoremenu","moveOutOfMoreDropdown","length","add","navNode","prepend","dropdownToggle","navLink","append","insertBefore","firstElementChild","setAttribute","window","addEventListener","toggledropdown","e","innerMenu","target","toggle","stopPropagation","on","querySelectorAll","dropdown","removeEventListener"],"mappings":"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"}