{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            PAGE: `#page`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionContentCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            toggler.click();\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            // Activities without url can only be page items in edit mode.\n            if (item.type === 'cm' && !item.url && !this.reactive.isEditing) {\n                return pageOffset >= element.offsetTop;\n            }\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseActions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            const promise = courseActions.refreshSection(sectionitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","_allSectionToggler","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","isChevron","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","id","Error","contentcollapsed","click","allcollapsed","allexpanded","forEach","remove","detail","undefined","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","pageItem","every","item","index","type","url","offsetTop","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","getElements","_item$dataset","unregister","indexed","cmitem","courseActions","refreshModule","then","catch","_reloadSection","sectionitem","refreshSection","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","itemid","currentitem","children","insertBefore","lastchild","lastChild","_lastchild$classList","_lastchild$dataset","removeChild"],"mappings":"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"}